### **How to Use the Updated Script**  

1. **Prepare Lab Data:**  
   - Save your experimental results in a **CSV file** (e.g., `lab_data.csv`).  
   - The CSV should have two columns:  
     ```
     Time,Regeneration
     0,0.1
     10,0.3
     20,0.6
     ... (more data points)
     ```

2. **Run the Script:**  
   - Ensure `pandas` is installed (`pip install pandas`).  
   - Replace `'lab_data.csv'` with the actual file path.  
   - The script will **load lab data**, compare it to simulated models, and plot the results.

3. **Expected Outcome:**  
   - If **memory-driven physics is real**, experimental data will align with the **Memory Field model** (green line).  
   - If no effect is observed, data will match the **standard regeneration model** (blue dashed line).  

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.signal import savgol_filter
from sklearn.metrics import mean_squared_error, r2_score

def cell_growth(t, rate, noise=0.0):
    """Model cell regeneration as an exponential growth process with optional noise."""
    growth = (1 - np.exp(-rate * t)) + np.random.normal(0, noise, len(t))
    return np.clip(growth, 0, 1)  # Ensure values stay in valid range

# Load real-world experimental data from CSV
def load_experimental_data(csv_file):
    """Load lab data from a CSV file. The CSV should have two columns: Time, Regeneration."""
    try:
        data = pd.read_csv(csv_file)
        lab_time = data['Time'].values
        lab_regeneration = data['Regeneration'].values
        return lab_time, lab_regeneration
    except Exception as e:
        print(f"Error loading data: {e}")
        return np.array([]), np.array([])

# Time evolution (in hours or arbitrary units)
t_values = np.linspace(0, 100, 1000)

# Define growth rates for each condition
rate_control = 0.03   # Normal growth rate
rate_memory = 0.05    # Enhanced regeneration due to memory fields
rate_entropy = 0.02   # Slower growth due to high-entropy disruption

# Compute cell regeneration over time
control_growth = cell_growth(t_values, rate_control, noise=0.02)
memory_growth = cell_growth(t_values, rate_memory, noise=0.01)
entropy_growth = cell_growth(t_values, rate_entropy, noise=0.05)

# Apply smoothing
control_growth_smooth = savgol_filter(control_growth, 51, 3)
memory_growth_smooth = savgol_filter(memory_growth, 51, 3)
entropy_growth_smooth = savgol_filter(entropy_growth, 51, 3)

# Load experimental data (replace 'lab_data.csv' with actual file path)
lab_time, lab_regeneration = load_experimental_data('lab_data.csv')

# Perform statistical analysis if data exists
if lab_time.size > 0 and lab_regeneration.size > 0:
    lab_regeneration_smooth = savgol_filter(lab_regeneration, 5, 2)
    
    # Interpolate theoretical models to match experimental data points
    control_interp = np.interp(lab_time, t_values, control_growth_smooth)
    memory_interp = np.interp(lab_time, t_values, memory_growth_smooth)
    entropy_interp = np.interp(lab_time, t_values, entropy_growth_smooth)
    
    # Compute Mean Squared Errors
    mse_control = mean_squared_error(lab_regeneration_smooth, control_interp)
    mse_memory = mean_squared_error(lab_regeneration_smooth, memory_interp)
    mse_entropy = mean_squared_error(lab_regeneration_smooth, entropy_interp)
    
    # Compute R-Squared Scores
    r2_control = r2_score(lab_regeneration_smooth, control_interp)
    r2_memory = r2_score(lab_regeneration_smooth, memory_interp)
    r2_entropy = r2_score(lab_regeneration_smooth, entropy_interp)
    
    print(f"MSE - Control Model: {mse_control:.5f}, R²: {r2_control:.5f}")
    print(f"MSE - Memory Field Model: {mse_memory:.5f}, R²: {r2_memory:.5f}")
    print(f"MSE - High-Entropy Model: {mse_entropy:.5f}, R²: {r2_entropy:.5f}")

# Plot the results
plt.figure(figsize=(8, 5))
plt.plot(t_values, control_growth_smooth, label="Control (Standard Regeneration)", linestyle='dashed', color='blue')
plt.plot(t_values, memory_growth_smooth, label="Memory Field (Enhanced Growth)", linestyle='solid', color='green')
plt.plot(t_values, entropy_growth_smooth, label="High-Entropy (Slower Regeneration)", linestyle='dotted', color='red')

if lab_time.size > 0 and lab_regeneration.size > 0:
    plt.scatter(lab_time, lab_regeneration, label="Raw Experimental Data", color='black', marker='o', alpha=0.5)
    plt.plot(lab_time, lab_regeneration_smooth, label="Smoothed Experimental Data", color='purple', linestyle='solid')

plt.xlabel("Time (hours or arbitrary units)")
plt.ylabel("Regeneration Progress (0-1)")
plt.title("Simulated vs Experimental Cell Regeneration under Memory Field Influence")
plt.legend()
plt.grid()
plt.show()
