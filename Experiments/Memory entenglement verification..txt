import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def entanglement_decay(t, tau):
    """Model entanglement decay as an exponential function."""
    return np.exp(-t / tau)

# Load real-world experimental data from CSV
def load_experimental_data(csv_file):
    """Load lab data from a CSV file. The CSV should have two columns: Time, Fidelity."""
    try:
        data = pd.read_csv(csv_file)
        lab_time = data['Time'].values
        lab_fidelity = data['Fidelity'].values
        return lab_time, lab_fidelity
    except Exception as e:
        print(f"Error loading data: {e}")
        return np.array([]), np.array([])

# Time evolution (in arbitrary units)
t_values = np.linspace(0, 100, 1000)

# Define decay rates for each condition
tau_control = 20   # Standard decoherence
tau_memory = 50    # Extended entanglement (memory field effect)
tau_entropy = 10   # Faster decoherence (high-entropy condition)

# Compute entanglement persistence
control_decay = entanglement_decay(t_values, tau_control)
memory_decay = entanglement_decay(t_values, tau_memory)
entropy_decay = entanglement_decay(t_values, tau_entropy)

# Load experimental data (replace 'lab_data.csv' with actual file path)
lab_time, lab_fidelity = load_experimental_data('lab_data.csv')

# Plot the results
plt.figure(figsize=(8, 5))
plt.plot(t_values, control_decay, label="Control (Standard Decoherence)", linestyle='dashed', color='blue')
plt.plot(t_values, memory_decay, label="Memory Field (Extended Coherence)", linestyle='solid', color='green')
plt.plot(t_values, entropy_decay, label="High-Entropy (Accelerated Decoherence)", linestyle='dotted', color='red')

if lab_time.size > 0 and lab_fidelity.size > 0:
    plt.scatter(lab_time, lab_fidelity, label="Experimental Data", color='black', marker='o')

plt.xlabel("Time (arbitrary units)")
plt.ylabel("Entanglement Fidelity")
plt.title("Memory-Driven Entanglement Stability Simulation vs. Lab Data")
plt.legend()
plt.grid()
plt.show()

### **How to Use the Updated Script**  

1. **Prepare Lab Data:**  
   - Save your experimental results in a **CSV file** (e.g., `lab_data.csv`).  
   - The CSV should have two columns:  
     ```
     Time,Fidelity
     0,1.0
     10,0.85
     20,0.65
     ... (more data points)
     ```

2. **Run the Script:**  
   - Ensure `pandas` is installed (`pip install pandas`).  
   - Replace `'lab_data.csv'` with the actual file path.  
   - The script will **load the lab data** and compare it to simulated models.  

3. **Expected Output:**  
   - If **memory-driven physics is real**, experimental data will align with the **Memory Field model** (green line).  
   - If no effect is observed, data will match the **standard decoherence model** (blue dashed line).  

Next step: **An automated data preprocessing function** to clean and normalize lab data? ðŸ“Š