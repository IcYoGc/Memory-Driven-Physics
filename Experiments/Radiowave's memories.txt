### **How to Use This Simulation**  
- **Run the script** in Python to visualize **radio wave signal decay over time** under different conditions.  
- **Expected Output:**  
  - **Memory Field (green line):** Slower RF signal decay (suggesting persistent resonance).  
  - **Control (blue dashed line):** Normal RF decay behavior.  
  - **High-Entropy (red dotted line):** Faster, more erratic signal loss.  

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.signal import savgol_filter

def radio_wave_decay(t, tau, noise=0.0):
    """Model radio wave signal decay as an exponential loss process with optional noise."""
    decay = np.exp(-t / tau) + np.random.normal(0, noise, len(t))
    return np.clip(decay, 0, 1)  # Ensure values stay in valid range

# Load real-world experimental data from CSV
def load_experimental_data(csv_file):
    """Load lab data from a CSV file. The CSV should have two columns: Time, SignalStrength."""
    try:
        data = pd.read_csv(csv_file)
        lab_time = data['Time'].values
        lab_signal = data['SignalStrength'].values
        return lab_time, lab_signal
    except Exception as e:
        print(f"Error loading data: {e}")
        return np.array([]), np.array([])

# Time evolution (in arbitrary units)
t_values = np.linspace(0, 100, 1000)

# Define decay rates for each condition
tau_control = 20   # Normal RF signal decay
tau_memory = 50    # Slower decay due to memory imprint
tau_entropy = 10   # Faster decay due to high-entropy interference

# Compute RF signal persistence
control_signal = radio_wave_decay(t_values, tau_control, noise=0.02)
memory_signal = radio_wave_decay(t_values, tau_memory, noise=0.01)
entropy_signal = radio_wave_decay(t_values, tau_entropy, noise=0.05)

# Apply smoothing
control_smooth = savgol_filter(control_signal, 51, 3)
memory_smooth = savgol_filter(memory_signal, 51, 3)
entropy_smooth = savgol_filter(entropy_signal, 51, 3)

# Load experimental data (replace 'lab_data.csv' with actual file path)
lab_time, lab_signal = load_experimental_data('lab_data.csv')

# Plot the results
plt.figure(figsize=(8, 5))
plt.plot(t_values, control_smooth, label="Control (Standard Decay)", linestyle='dashed', color='blue')
plt.plot(t_values, memory_smooth, label="Memory Field (Extended Signal Persistence)", linestyle='solid', color='green')
plt.plot(t_values, entropy_smooth, label="High-Entropy (Accelerated Decay)", linestyle='dotted', color='red')

if lab_time.size > 0 and lab_signal.size > 0:
    plt.scatter(lab_time, lab_signal, label="Experimental Data", color='black', marker='o')
    plt.plot(lab_time, savgol_filter(lab_signal, 5, 2), label="Smoothed Experimental Data", color='purple', linestyle='solid')

plt.xlabel("Time (arbitrary units)")
plt.ylabel("Relative Signal Strength")
plt.title("Simulated vs Experimental RF Signal Decay under Memory Field Influence")
plt.legend()
plt.grid()
plt.show()
