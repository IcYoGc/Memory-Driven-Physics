### **How to Use the Updated Script**  

1. **Prepare Lab Data:**  
   - Save your experimental results in a **CSV file** (e.g., `lab_data.csv`).  
   - The CSV should have two columns:  
     ```
     Time,Amplitude
     0,1.0
     10,0.85
     20,0.65
     ... (more data points)
     ```

2. **Run the Script:**  
   - Ensure `pandas` is installed (`pip install pandas`).  
   - Replace `'lab_data.csv'` with the actual file path.  
   - The script will **load lab data** and compare it to simulated models.  

3. **Expected Outcome:**  
   - If **memory-driven physics is real**, experimental data will align with the **Memory Field model** (green line).  
   - If no effect is observed, data will match the **standard dissipation model** (blue dashed line).  
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.signal import savgol_filter
from sklearn.metrics import mean_squared_error

def wave_decay(t, tau):
    """Model wave decay as an exponential function."""
    return np.exp(-t / tau) * np.cos(2 * np.pi * t / 10)  # Simulating oscillations with decay

# Load real-world experimental data from CSV
def load_experimental_data(csv_file):
    """Load lab data from a CSV file. The CSV should have two columns: Time, Amplitude."""
    try:
        data = pd.read_csv(csv_file)
        lab_time = data['Time'].values
        lab_amplitude = data['Amplitude'].values
        return lab_time, lab_amplitude
    except Exception as e:
        print(f"Error loading data: {e}")
        return np.array([]), np.array([])

# Apply smoothing to experimental data
def smooth_data(y, window=5, poly=2):
    """Apply Savitzky-Golay filter for smoothing."""
    return savgol_filter(y, window, poly) if len(y) >= window else y

# Time evolution (in arbitrary units)
t_values = np.linspace(0, 100, 1000)

# Define decay rates for each condition
tau_control = 20   # Standard wave dissipation
tau_memory = 50    # Extended coherence due to memory field
tau_entropy = 10   # Faster dissipation in high-entropy conditions

# Compute wave persistence
control_wave = wave_decay(t_values, tau_control)
memory_wave = wave_decay(t_values, tau_memory)
entropy_wave = wave_decay(t_values, tau_entropy)

# Load experimental data (replace 'lab_data.csv' with actual file path)
lab_time, lab_amplitude = load_experimental_data('lab_data.csv')

# Apply smoothing if data exists
if lab_time.size > 0 and lab_amplitude.size > 0:
    lab_amplitude_smoothed = smooth_data(lab_amplitude)
    
    # Interpolate theoretical models to match experimental data points
    control_interp = np.interp(lab_time, t_values, control_wave)
    memory_interp = np.interp(lab_time, t_values, memory_wave)
    entropy_interp = np.interp(lab_time, t_values, entropy_wave)
    
    # Compute Mean Squared Errors
    mse_control = mean_squared_error(lab_amplitude_smoothed, control_interp)
    mse_memory = mean_squared_error(lab_amplitude_smoothed, memory_interp)
    mse_entropy = mean_squared_error(lab_amplitude_smoothed, entropy_interp)
    
    print(f"MSE - Control Model: {mse_control:.5f}")
    print(f"MSE - Memory Field Model: {mse_memory:.5f}")
    print(f"MSE - High-Entropy Model: {mse_entropy:.5f}")
else:
    lab_amplitude_smoothed = lab_amplitude

# Plot the results
plt.figure(figsize=(8, 5))
plt.plot(t_values, control_wave, label="Control (Standard Dissipation)", linestyle='dashed', color='blue')
plt.plot(t_values, memory_wave, label="Memory Field (Extended Persistence)", linestyle='solid', color='green')
plt.plot(t_values, entropy_wave, label="High-Entropy (Accelerated Dissipation)", linestyle='dotted', color='red')

if lab_time.size > 0 and lab_amplitude.size > 0:
    plt.scatter(lab_time, lab_amplitude, label="Raw Experimental Data", color='black', marker='o', alpha=0.5)
    plt.plot(lab_time, lab_amplitude_smoothed, label="Smoothed Experimental Data", color='purple', linestyle='solid')

plt.xlabel("Time (arbitrary units)")
plt.ylabel("Wave Amplitude")
plt.title("Superfluid Memory Simulation vs. Lab Data")
plt.legend()
plt.grid()
plt.show()
